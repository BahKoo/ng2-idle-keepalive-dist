{"version":3,"sources":["keepalive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qBAAkD,eAAe,CAAC,CAAA;AAClE,qBAAqD,eAAe,CAAC,CAAA;AACrE,qBAA2B,eAAe,CAAC,CAAA;AAO3C;IAA+B,6BAAY;IAmBzC,mBAAoB,IAAU;QAC5B,iBAAO,CAAC;QADU,SAAI,GAAJ,IAAI,CAAM;QAjBtB,iBAAY,GAAW,EAAE,GAAG,EAAE,CAAC;QAMhC,WAAM,GAAsB,IAAI,mBAAY,CAAC;QAK7C,mBAAc,GAA2B,IAAI,mBAAY,CAAC;IAQjE,CAAC;IAOD,2BAAO,GAAP,UAAQ,GAAoB;QAC1B,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,cAAO,CAAC,EAAC,MAAM,EAAE,oBAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;QACxE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,cAAO,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAOD,4BAAQ,GAAR,UAAS,OAAgB;QACvB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAOD,wBAAI,GAAJ;QAAA,iBAOC;QANC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;gBAC/D,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAKD,yBAAK,GAAL;QAAA,iBAMC;QALC,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;YAC5B,KAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC,EAAE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;IAC/B,CAAC;IAKD,wBAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAKD,+BAAW,GAAX;QACE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAMD,6BAAS,GAAT;QACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAxGH;QAAC,iBAAU,EAAE;;iBAAA;IAyGb,gBAAC;AAAD,CAxGA,AAwGC,CAxG8B,mBAAY,GAwG1C;AAxGY,iBAAS,YAwGrB,CAAA","file":"keepalive.js","sourcesContent":["import {EventEmitter, Injectable, OnDestroy} from '@angular/core';\nimport {Http, Request, RequestMethod, Response} from '@angular/http';\nimport {KeepaliveSvc} from 'ng2-idle/core';\n\n\n/**\n * An example of an injectable service.\n */\n@Injectable()\nexport class Keepalive extends KeepaliveSvc implements OnDestroy {\n  private pingRequest: Request;\n  private pingInterval: number = 10 * 60;\n  private pingHandle: any;\n\n  /*\n   * An event emitted when the service is pinging.\n   */\n  public onPing: EventEmitter<any> = new EventEmitter;\n\n  /*\n   * An event emitted when the service has pinged an HTTP endpoint and received a response.\n   */\n  public onPingResponse: EventEmitter<Response> = new EventEmitter;\n\n  /*\n   * Initializes a new instance of Keepalive\n   * @param http - The HTTP service.\n   */\n  constructor(private http: Http) {\n    super();\n  }\n\n  /*\n   * Sets the string or Request that should be used when pinging.\n   * @param url - The URL or Request object to use when pinging.\n   * @return The current Request used when pinging.\n   */\n  request(url?: string|Request): Request {\n    if (typeof url === 'string') {\n      this.pingRequest = new Request({method: RequestMethod.Get, url: url});\n    } else if (url instanceof Request) {\n      this.pingRequest = url;\n    } else if (url === null) {\n      this.pingRequest = null;\n    }\n\n    return this.pingRequest;\n  }\n\n  /*\n   * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n   * @param seconds - The ping interval in seconds.\n   * @return The current interval value.\n   */\n  interval(seconds?: number): number {\n    if (!isNaN(seconds) && seconds > 0) {\n      this.pingInterval = seconds;\n    } else if (!isNaN(seconds) && seconds <= 0) {\n      throw new Error('Interval value must be greater than zero.');\n    }\n\n    return this.pingInterval;\n  }\n\n  /*\n   * Immediately performs the ping operation. If a request has been set, an HTTP\n   * request will be made and the response will be emitted via the\n   * onPingResponse event.\n   */\n  ping(): void {\n    this.onPing.emit(null);\n    if (this.pingRequest) {\n      this.http.request(this.pingRequest).subscribe((response: Response) => {\n        this.onPingResponse.emit(response);\n      });\n    }\n  }\n\n  /*\n   * Starts pinging on an interval.\n   */\n  start(): void {\n    this.stop();\n\n    this.pingHandle = setInterval(() => {\n      this.ping();\n    }, this.pingInterval * 1000);\n  }\n\n  /*\n   * Stops pinging on an interval.\n   */\n  stop(): void {\n    if (this.pingHandle) {\n      clearInterval(this.pingHandle);\n      this.pingHandle = null;\n    }\n  }\n\n  /*\n   * Performs any cleanup tasks when Angular destroys the instance.\n   */\n  ngOnDestroy(): void {\n    this.stop();\n  }\n\n  /*\n   * Returns whether or not the service will ping automatically at the specified interval.\n   * @return True if the service will ping at the specified interval; otherwise, false.\n   */\n  isRunning(): boolean {\n    return !!this.pingHandle;\n  }\n}\n"]}